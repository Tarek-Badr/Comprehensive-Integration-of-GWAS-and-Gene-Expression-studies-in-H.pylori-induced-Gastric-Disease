{
    "type": [
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        3
    ],
    "data": [
        "",
        "> ",
        "## Annotate expression",
        "> ",
        "",
        "> ",
        "## Expr1",
        "> ",
        "head(rownames(expr1))",
        "[1] \"ILMN_10000\" \"ILMN_10001\" \"ILMN_10002\" \"ILMN_10004\" \"ILMN_10005\" \"ILMN_10006\"\n",
        "> ",
        "rownames(expr1) <- Dataset1$keys",
        "> ",
        "expr1 <- expr1[!is.na(rownames(expr1)), ]",
        "> ",
        "",
        "> ",
        "#####################",
        "> ",
        "## expr2",
        "> ",
        "head(rownames(expr2))",
        "[1] \"A_19_P00315452\" \"A_19_P00315459\" \"A_19_P00315482\" \"A_19_P00315492\" \"A_19_P00315493\"\n[6] \"A_19_P00315502\"\n",
        "> ",
        "rownames(expr2) <- Dataset2$keys",
        "> ",
        "expr2 <- expr2[!is.na(rownames(expr2)), ]",
        "> ",
        "dim(expr2)",
        "[1] 27443    32\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#####################",
        "> ",
        "## expr3",
        "> ",
        "head(rownames(expr3))",
        "[1] \"A_23_P100001\" \"A_23_P100022\" \"A_23_P100056\" \"A_23_P100074\" \"A_23_P100127\" \"A_23_P100141\"\n",
        "> ",
        "rownames(expr3) <- Dataset3$keys",
        "> ",
        "expr3 <- expr3[!is.na(rownames(expr3)), ]",
        "> ",
        "dim(expr3)",
        "[1] 25755    16\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# #######################",
        "> ",
        "# expr4",
        "> ",
        "head(rownames(expr4))",
        "[1] \"1007_s_at\" \"1053_at\"   \"117_at\"    \"121_at\"    \"1255_g_at\" \"1294_at\"  \n",
        "> ",
        "rownames(expr4) <- Dataset4$keys",
        "> ",
        "expr4 <- expr4[!is.na(rownames(expr4)), ]",
        "> ",
        "dim(expr4)",
        "[1] 42041    32\n",
        "> ",
        "",
        "> ",
        "# #######################",
        "> ",
        "# Valexpr1",
        "> ",
        "head(rownames(Valexpr1))",
        "[1] \"ILMN_1343291\" \"ILMN_1343295\" \"ILMN_1651199\" \"ILMN_1651209\" \"ILMN_1651210\" \"ILMN_1651221\"\n",
        "> ",
        "rownames(Valexpr1) <- ValDataset1$keys",
        "> ",
        "Valexpr1 <- Valexpr1[!is.na(rownames(Valexpr1)), ]",
        "> ",
        "dim(Valexpr1)",
        "[1] 24630    20\n",
        "> ",
        "",
        "> ",
        "# #######################",
        "> ",
        "# Valexpr2",
        "> ",
        "head(rownames(Valexpr2))",
        "[1] \"(+)E1A_r60_1\"    \"(+)E1A_r60_3\"    \"(+)E1A_r60_a104\" \"(+)E1A_r60_a107\" \"(+)E1A_r60_a135\"\n[6] \"(+)E1A_r60_a20\" \n",
        "> ",
        "rownames(Valexpr2) <- ValDataset2$keys",
        "> ",
        "Valexpr2 <- Valexpr2[!is.na(rownames(Valexpr2)), ]",
        "> ",
        "dim(Valexpr2)",
        "[1] 21624     6\n",
        "> ",
        "",
        "> ",
        "# #######################",
        "> ",
        "# Valexpr3",
        "> ",
        "head(rownames(Valexpr3))",
        "[1] \"2824546_st\" \"2824549_st\" \"2824551_st\" \"2824554_st\" \"2827992_st\" \"2827995_st\"\n",
        "> ",
        "rownames(Valexpr3) <- ValDataset3$keys",
        "> ",
        "Valexpr3 <- Valexpr3[!is.na(rownames(Valexpr3)), ]",
        "> ",
        "dim(Valexpr3)",
        "[1] 24532     6\n",
        "> ",
        "",
        "> ",
        "# #######################",
        "> ",
        "# Valexpr4",
        "> ",
        "head(rownames(Valexpr4))",
        "[1] \"1007_s_at\" \"1053_at\"   \"117_at\"    \"121_at\"    \"1255_g_at\" \"1294_at\"  \n",
        "> ",
        "rownames(Valexpr4) <- ValDataset4$keys",
        "> ",
        "Valexpr4 <- Valexpr4[!is.na(rownames(Valexpr4)), ]",
        "> ",
        "dim(Valexpr4)",
        "[1] 42041     6\n",
        "> ",
        "",
        "> ",
        "# #######################",
        "> ",
        "# cancerExpr1",
        "> ",
        "head(rownames(canExpr1))",
        "[1] \"(+)E1A_r60_1\"    \"(+)E1A_r60_3\"    \"(+)E1A_r60_a104\" \"(+)E1A_r60_a107\" \"(+)E1A_r60_a135\"\n[6] \"(+)E1A_r60_a20\" \n",
        "> ",
        "rownames(canExpr1) <- CanDataset1$keys",
        "> ",
        "canExpr1 <- canExpr1[!is.na(rownames(canExpr1)), ]",
        "> ",
        "dim(canExpr1)",
        "[1] 25755    64\n",
        "> ",
        "",
        "> ",
        "# #######################",
        "> ",
        "# cancerExpr2",
        "> ",
        "head(rownames(canExpr2))",
        "[1] \"1\" \"2\" \"3\" \"4\" \"5\" \"6\"\n",
        "> ",
        "",
        "> ",
        "# annotate canExpr2 (illumina)",
        "> ",
        "tmp <- canExpr2$Hybridization.REF",
        "> ",
        "canExpr2$GeneSymbol<- mapIds(illuminaHumanv3.db,",
        "+ ",
        "                              keys=tmp,",
        "+ ",
        "                              column=\"SYMBOL\",",
        "+ ",
        "                              keytype=\"PROBEID\",",
        "+ ",
        "                              multiVals=\"first\")",
        "'select()' returned 1:many mapping between keys and columns\n",
        "> ",
        "",
        "> ",
        "canExpr2 <- canExpr2[!duplicated(canExpr2$GeneSymbol), ]",
        "> ",
        "canExpr2 <- canExpr2[!is.na(canExpr2$GeneSymbol), ]",
        "> ",
        "",
        "> ",
        "rownames(canExpr2) <- canExpr2$GeneSymbol",
        "> ",
        "canExpr2$Hybridization.REF <- NULL",
        "> ",
        "canExpr2$GeneSymbol <- NULL",
        "> ",
        "dim(canExpr2)",
        "[1] 19490    40\n",
        "> ",
        "",
        "> ",
        "# Finally modify the sample names to match those in the phenotype",
        "> ",
        "colnames(canExpr2) <- gsub(\"X\", \"\", colnames(canExpr2))",
        "> ",
        "colnames(canExpr2) <- tolower(colnames(canExpr2))",
        "> ",
        "colnames(canExpr2)",
        " [1] \"2t\"  \"2f\"  \"5t\"  \"5f\"  \"6t\"  \"6f\"  \"7t\"  \"7f\"  \"8t\"  \"8f\"  \"10t\" \"10f\" \"11t\" \"11f\" \"12t\" \"12f\"\n[17] \"13t\" \"13f\" \"14t\" \"14f\" \"16t\" \"16f\" \"17t\" \"17f\" \"18t\" \"18f\" \"19t\" \"19f\" \"20t\" \"20f\" \"21t\" \"21f\"\n[33] \"23t\" \"23f\" \"25t\" \"25f\" \"26t\" \"26f\" \"27t\" \"27f\"\n",
        "> ",
        "",
        "> ",
        "# Convert to numeric matrix",
        "> ",
        "COLS <- colnames(canExpr2)",
        "> ",
        "ROWS <- rownames(canExpr2)",
        "> ",
        "canExpr2 <- matrix(as.numeric(unlist(canExpr2)),nrow=nrow(canExpr2))",
        "> ",
        "rownames(canExpr2) <- ROWS",
        "> ",
        "colnames(canExpr2) <- COLS",
        "> ",
        "# ############################################################",
        "> ",
        "####################################################################",
        "> ",
        "#### Modify the phenotypes",
        "> ",
        "",
        "> ",
        "# Pheno1",
        "> ",
        "",
        "> ",
        "pheno1$DiseaseStatus <- pheno1$`disease state:ch1`",
        "> ",
        "pheno1$DiseaseStatus[pheno1$DiseaseStatus == \"non-infected\"] <- \"control\"",
        "> ",
        "pheno1$DiseaseStatus[pheno1$DiseaseStatus == \"infected\"] <- \"case\"",
        "> ",
        "pheno1$DiseaseStatus[pheno1$DiseaseStatus == \"atrophy\"] <- \"case\"",
        "> ",
        "pheno1$DiseaseStatus <- factor(pheno1$DiseaseStatus, levels = c(\"control\",\"case\"))",
        "> ",
        "table(pheno1$DiseaseStatus)",
        "\ncontrol    case \n      6      12 \n",
        "> ",
        "all(rownames(pheno1) == colnames(expr1))",
        "[1] TRUE\n",
        "> ",
        "# ",
        "> ",
        "Dataset1$pheno <- pheno1",
        "> ",
        "Dataset1$expr <- expr1",
        "> ",
        "Dataset1$keys <- rownames(expr1)",
        "> ",
        "########## ",
        "> ",
        "",
        "> ",
        "## Modify pheno2",
        "> ",
        "",
        "> ",
        "pheno2$DiseaseStatus <- pheno2$`gastritis grade:ch1`",
        "> ",
        "pheno2$DiseaseStatus[pheno2$DiseaseStatus == \"normal\"] <- \"control\"",
        "> ",
        "pheno2$DiseaseStatus[pheno2$DiseaseStatus %in% c(\"mild\", \"IM\", \"severe\")] <- \"case\"",
        "> ",
        "pheno2$DiseaseStatus <- factor(pheno2$DiseaseStatus, levels = c(\"control\", \"case\"))",
        "> ",
        "table(pheno2$DiseaseStatus)",
        "\ncontrol    case \n      8      24 \n",
        "> ",
        "",
        "> ",
        "# ",
        "> ",
        "all(rownames(pheno2) == colnames(expr2))",
        "[1] TRUE\n",
        "> ",
        "",
        "> ",
        "## Finally, replace the expression and phenotype data in the dataset with the new modified versions",
        "> ",
        "Dataset2$expr <- expr2",
        "> ",
        "Dataset2$pheno <- pheno2",
        "> ",
        "Dataset2$keys <- rownames(expr2)",
        "> ",
        "",
        "> ",
        "######",
        "> ",
        "# Modify pheno3",
        "> ",
        "pheno3$DiseaseStatus <- pheno3$title",
        "> ",
        "pheno3$DiseaseStatus[1:4] <- \"control\"",
        "> ",
        "pheno3$DiseaseStatus[5:length(pheno3$DiseaseStatus)] <- \"case\"",
        "> ",
        "",
        "> ",
        "pheno3$DiseaseStatus <- factor(pheno3$DiseaseStatus, levels = c(\"control\", \"case\"))",
        "> ",
        "table(pheno3$DiseaseStatus)",
        "\ncontrol    case \n      4      12 \n",
        "> ",
        "",
        "> ",
        "all(rownames(pheno3) == colnames(expr3))",
        "[1] TRUE\n",
        "> ",
        "",
        "> ",
        "## Finally, replace the expression and phenotype data in the dataset with the new modified versions",
        "> ",
        "Dataset3$pheno <- pheno3",
        "> ",
        "Dataset3$expr <- expr3",
        "> ",
        "Dataset3$keys <- rownames(expr3)",
        "> ",
        "",
        "> ",
        "####### ",
        "> ",
        "## Modify pheno4",
        "> ",
        "pheno4$DiseaseStatus <- pheno4$title",
        "> ",
        "pheno4$DiseaseStatus <- gsub(\"\\\\,.+\", \"\", pheno4$DiseaseStatus)",
        "> ",
        "pheno4$DiseaseStatus <- gsub(\"Gastric biopsy \", \"\", pheno4$DiseaseStatus)",
        "> ",
        "pheno4$DiseaseStatus[pheno4$DiseaseStatus == \"HP- ER+\"] <- \"case\"",
        "> ",
        "pheno4$DiseaseStatus[pheno4$DiseaseStatus == \"HP+ ER+\"] <- \"case\"",
        "> ",
        "pheno4$DiseaseStatus[pheno4$DiseaseStatus == \"HP+ ER-\"] <- \"case\"",
        "> ",
        "pheno4$DiseaseStatus[pheno4$DiseaseStatus == \"HP- ER-\"] <- \"control\"",
        "> ",
        "",
        "> ",
        "pheno4$DiseaseStatus <- factor(pheno4$DiseaseStatus, levels = c(\"control\", \"case\"))",
        "> ",
        "table(pheno4$DiseaseStatus)",
        "\ncontrol    case \n      8      24 \n",
        "> ",
        "",
        "> ",
        "## Modify sample names to match sample names of pheno4",
        "> ",
        "all(rownames(pheno4) == colnames(expr4))",
        "[1] TRUE\n",
        "> ",
        "",
        "> ",
        "## Finally, replace the expression and phenotype data in the dataset with the new modified versions",
        "> ",
        "Dataset4$expr <- expr4",
        "> ",
        "Dataset4$pheno <- pheno4",
        "> ",
        "Dataset4$keys <- rownames(expr4)",
        "> ",
        "",
        "> ",
        "################## ",
        "> ",
        "## Modify valPheno1",
        "> ",
        "Valpheno1$DiseaseStatus <- Valpheno1$source_name_ch1",
        "> ",
        "Valpheno1 <- Valpheno1[1:8, ]",
        "> ",
        "Valpheno1$DiseaseStatus[1:4] <- \"case\"",
        "> ",
        "Valpheno1$DiseaseStatus[5:8] <- \"control\"",
        "> ",
        "",
        "> ",
        "Valpheno1$DiseaseStatus <- factor(Valpheno1$DiseaseStatus, levels = c(\"control\", \"case\"))",
        "> ",
        "table(Valpheno1$DiseaseStatus)",
        "\ncontrol    case \n      4       4 \n",
        "> ",
        "",
        "> ",
        "## Modify sample names to match sample names of valpheno1",
        "> ",
        "Valexpr1 <- Valexpr1[, colnames(Valexpr1) %in% rownames(Valpheno1)]",
        "> ",
        "all(rownames(Valpheno1) == colnames(Valexpr1))",
        "[1] TRUE\n",
        "> ",
        "",
        "> ",
        "## Finally, replace the expression and phenotype data in the dataset with the new modified versions",
        "> ",
        "ValDataset1$expr <- Valexpr1",
        "> ",
        "ValDataset1$pheno <- Valpheno1",
        "> ",
        "ValDataset1$keys <- rownames(Valexpr1)",
        "> ",
        "",
        "> ",
        "################## ",
        "> ",
        "## Modify valPheno2",
        "> ",
        "Valpheno2$DiseaseStatus <- Valpheno2$`infection:ch1`",
        "> ",
        "Valpheno2$DiseaseStatus[Valpheno2$DiseaseStatus == \"uninfected\"] <- \"control\"",
        "> ",
        "Valpheno2$DiseaseStatus[Valpheno2$DiseaseStatus == \"H. pylori strain 60190\"] <- \"case\"",
        "> ",
        "",
        "> ",
        "Valpheno2$DiseaseStatus <- factor(Valpheno2$DiseaseStatus, levels = c(\"control\", \"case\"))",
        "> ",
        "table(Valpheno2$DiseaseStatus)",
        "\ncontrol    case \n      3       3 \n",
        "> ",
        "",
        "> ",
        "## Modify sample names to match sample names of valpheno2",
        "> ",
        "all(rownames(Valpheno2) == colnames(Valexpr2))",
        "[1] TRUE\n",
        "> ",
        "",
        "> ",
        "## Finally, replace the expression and phenotype data in the dataset with the new modified versions",
        "> ",
        "ValDataset2$expr <- Valexpr2",
        "> ",
        "ValDataset2$pheno <- Valpheno2",
        "> ",
        "ValDataset2$keys <- rownames(Valexpr2)",
        "> ",
        "",
        "> ",
        "################## ",
        "> ",
        "## Modify valPheno3",
        "> ",
        "Valpheno3$DiseaseStatus <- Valpheno3$title",
        "> ",
        "Valpheno3$DiseaseStatus[1:3] <- \"control\"",
        "> ",
        "Valpheno3$DiseaseStatus[4:6] <- \"case\"",
        "> ",
        "",
        "> ",
        "Valpheno3$DiseaseStatus <- factor(Valpheno3$DiseaseStatus, levels = c(\"control\", \"case\"))",
        "> ",
        "table(Valpheno3$DiseaseStatus)",
        "\ncontrol    case \n      3       3 \n",
        "> ",
        "",
        "> ",
        "## Modify sample names to match sample names of valpheno3",
        "> ",
        "all(rownames(Valpheno3) == colnames(Valexpr3))",
        "[1] TRUE\n",
        "> ",
        "",
        "> ",
        "## Finally, replace the expression and phenotype data in the dataset with the new modified versions",
        "> ",
        "ValDataset3$expr <- Valexpr3",
        "> ",
        "ValDataset3$pheno <- Valpheno3",
        "> ",
        "ValDataset3$keys <- rownames(Valexpr3)",
        "> ",
        "",
        "> ",
        "################## ",
        "> ",
        "## Modify valPheno4",
        "> ",
        "Valpheno4$DiseaseStatus <- Valpheno4$title",
        "> ",
        "Valpheno4$DiseaseStatus[1:3] <- \"control\"",
        "> ",
        "Valpheno4$DiseaseStatus[4:6] <- \"case\"",
        "> ",
        "",
        "> ",
        "Valpheno4$DiseaseStatus <- factor(Valpheno4$DiseaseStatus, levels = c(\"control\", \"case\"))",
        "> ",
        "table(Valpheno4$DiseaseStatus)",
        "\ncontrol    case \n      3       3 \n",
        "> ",
        "",
        "> ",
        "## Modify sample names to match sample names of valpheno3",
        "> ",
        "all(rownames(Valpheno4) == colnames(Valexpr4))",
        "[1] TRUE\n",
        "> ",
        "",
        "> ",
        "## Finally, replace the expression and phenotype data in the dataset with the new modified versions",
        "> ",
        "ValDataset4$expr <- Valexpr4",
        "> ",
        "ValDataset4$pheno <- Valpheno4",
        "> ",
        "ValDataset4$keys <- rownames(Valexpr4)",
        "> ",
        "",
        "> ",
        "################## ",
        "> ",
        "## Modify cancer pheno1",
        "> ",
        "canPheno1$DiseaseStatus <- canPheno1$`tissue:ch1`",
        "> ",
        "canPheno1$DiseaseStatus[canPheno1$DiseaseStatus == \"normal gastric tissue\"] <- \"control\"",
        "> ",
        "canPheno1$DiseaseStatus[canPheno1$DiseaseStatus == \"gastric tumor\"] <- \"case\"",
        "> ",
        "",
        "> ",
        "canPheno1$DiseaseStatus <- factor(canPheno1$DiseaseStatus, levels = c(\"control\", \"case\"))",
        "> ",
        "table(canPheno1$DiseaseStatus)",
        "\ncontrol    case \n     32      32 \n",
        "> ",
        "",
        "> ",
        "## Modify sample names to match sample names of valpheno3",
        "> ",
        "all(rownames(canPheno1) == colnames(canExpr1))",
        "[1] TRUE\n",
        "> ",
        "",
        "> ",
        "## Finally, replace the expression and phenotype data in the dataset with the new modified versions",
        "> ",
        "CanDataset1$expr <- canExpr1",
        "> ",
        "CanDataset1$pheno <- canPheno1",
        "> ",
        "CanDataset1$keys <- rownames(canExpr1)",
        "> ",
        "",
        "> ",
        "################## ",
        "> ",
        "## Modify cancer pheno2",
        "> ",
        "",
        "> ",
        "rownames(canPheno2) <- canPheno2$Source.Name",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "canPheno2$DiseaseStatus <- canPheno2$Factor.Value.disease.",
        "> ",
        "canPheno2$DiseaseStatus[canPheno2$DiseaseStatus == \"normal\"] <- \"control\"",
        "> ",
        "canPheno2$DiseaseStatus[canPheno2$DiseaseStatus == \"gastric adenocarcinoma\"] <- \"case\"",
        "> ",
        "",
        "> ",
        "canPheno2$DiseaseStatus <- factor(canPheno2$DiseaseStatus, levels = c(\"control\", \"case\"))",
        "> ",
        "table(canPheno2$DiseaseStatus)",
        "\ncontrol    case \n     20      20 \n",
        "> ",
        "",
        "> ",
        "## Modify sample names to match sample names of valpheno3",
        "> ",
        "all(rownames(canPheno2) == colnames(canExpr2))",
        "[1] TRUE\n",
        "> ",
        "",
        "> ",
        "## Finally, replace the expression and phenotype data in the dataset with the new modified versions",
        "> ",
        "CanDataset2 <- list()",
        "> ",
        "CanDataset2$expr <- matrix(as.numeric(unlist(canExpr2)),nrow=nrow(canExpr2))",
        "> ",
        "CanDataset2$pheno <- canPheno2",
        "> ",
        "CanDataset2$keys <- rownames(canExpr2)",
        "> ",
        "CanDataset2$formattedName <- \"EMTAB1440\"",
        "> ",
        "",
        "> ",
        "#########################################################################",
        "> ",
        "############################################################################",
        "> ",
        "",
        "> ",
        "## Label samples (All samples need to be assigned labels in the $class vector, 1 for ‘disease’ or 0 for ‘control’)",
        "> ",
        "Dataset1 <- classFunction(Dataset1, column = \"DiseaseStatus\", diseaseTerms = c(\"case\"))",
        "> ",
        "Dataset2 <- classFunction(Dataset2, column = \"DiseaseStatus\", diseaseTerms = c(\"case\"))",
        "> ",
        "Dataset3 <- classFunction(Dataset3, column = \"DiseaseStatus\", diseaseTerms = c(\"case\"))",
        "> ",
        "Dataset4 <- classFunction(Dataset4, column = \"DiseaseStatus\", diseaseTerms = c(\"case\"))",
        "> ",
        "",
        "> ",
        "ValDataset1 <- classFunction(ValDataset1, column = \"DiseaseStatus\", diseaseTerms = c(\"case\"))",
        "> ",
        "ValDataset2 <- classFunction(ValDataset2, column = \"DiseaseStatus\", diseaseTerms = c(\"case\"))",
        "> ",
        "ValDataset3 <- classFunction(ValDataset3, column = \"DiseaseStatus\", diseaseTerms = c(\"case\"))",
        "> ",
        "ValDataset4 <- classFunction(ValDataset4, column = \"DiseaseStatus\", diseaseTerms = c(\"case\"))",
        "> ",
        "",
        "> ",
        "CanDataset1 <- classFunction(CanDataset1, column = \"DiseaseStatus\", diseaseTerms = c(\"case\"))",
        "> ",
        "CanDataset2 <- classFunction(CanDataset2, column = \"DiseaseStatus\", diseaseTerms = c(\"case\"))",
        "> ",
        "",
        "> ",
        "############################################################################",
        "> ",
        "############################################################################",
        "> ",
        "#########################################################################",
        "> ",
        "## The metaanalysis",
        "> ",
        "",
        "> ",
        "## Creating the meta object",
        "> ",
        "AllDataSets <- list(Dataset1, Dataset2, Dataset3, Dataset4)",
        "> ",
        "names(AllDataSets) <- c(Dataset1$formattedName, Dataset2$formattedName, Dataset3$formattedName, Dataset4$formattedName)",
        "> ",
        "",
        "> ",
        "HPylori_Meta <- list()",
        "> ",
        "HPylori_Meta$originalData <- AllDataSets",
        "> ",
        "",
        "> ",
        "## Check the meta object before the metaanalysis",
        "> ",
        "checkDataObject(HPylori_Meta, \"Meta\", \"Pre-Analysis\") ## If true, Proceed to the meta analysis",
        "[1] TRUE\n",
        "> ",
        "",
        "> ",
        "#HPylori_Meta <- geneSymbolCorrection(HPylori_Meta)",
        "> ",
        "",
        "> ",
        "## Run the meta analysis",
        "> ",
        "HPylori_metaanalysis <- runMetaAnalysis(HPylori_Meta, runLeaveOneOutAnalysis = F, maxCores = 3)",
        "Found common probes in 2 \nFound common probes in 3 \nFound common probes in 4 \nComputing effect sizes...\nComputing summary effect sizes...\nComputing Fisher's output...",
        "> ",
        "",
        "> ",
        "# effectSize = 0/ FDR = 0.1/ Nstudies = 3",
        "> ",
        "",
        "> ",
        "## Filter out significant genes from the metaanalysis results (this will be the gene signature that separates Metas from No_Mets)",
        "> ",
        "HPylori_metaanalysis <- filterGenes(HPylori_metaanalysis, isLeaveOneOut = F, effectSizeThresh = 0, FDRThresh = 0.05, numberStudiesThresh = 4)",
        "> ",
        "",
        "> ",
        "## Assigning a name to the filter",
        "> ",
        "filter <- HPylori_metaanalysis$filterResults[[1]]",
        "> ",
        "filter",
        "$posGeneNames\n  [1] \"PROS1\"     \"PPA1\"      \"MMP12\"     \"PDZK1IP1\"  \"LPIN1\"     \"ANXA4\"     \"CARD9\"    \n  [8] \"ENTPD1\"    \"TNIK\"      \"HSPA4\"     \"GBP1\"      \"TNFRSF1B\"  \"GPNMB\"     \"SLC6A14\"  \n [15] \"HSP90AA1\"  \"TMC5\"      \"CLDN7\"     \"PSMA1\"     \"DGKA\"      \"GCH1\"      \"JAK2\"     \n [22] \"ZC3H12A\"   \"HSD3B7\"    \"HSP90B1\"   \"KCNE3\"     \"WARS\"      \"S100A9\"    \"PSMB8\"    \n [29] \"GNA15\"     \"MLKL\"      \"GK\"        \"NCF2\"      \"KPNB1\"     \"SLC7A7\"    \"SERPINA3\" \n [36] \"PRR5\"      \"GPRC5A\"    \"SLC4A11\"   \"NBN\"      ",
        " \"HM13\"      \"MCL1\"      \"HIF1A\"    \n [43] \"THY1\"      \"HLA-DQA2\"  \"ETS2\"      \"GCNT3\"     \"CCL18\"     \"GJB2\"      \"TREM1\"    \n [50] \"BATF\"      \"CKLF\"      \"SNX10\"     \"NUP62\"     \"MCM5\"      \"SULF2\"     \"TMPRSS3\"  \n [57] \"DNAJA1\"    \"ASRGL1\"    \"B3GALT5\"   \"CRELD2\"    \"CD40LG\"    \"CD44\"      \"SYK\"      \n [64] \"C5AR1\"     \"ARL9\"      \"SCO2\"      \"NINJ2\"     \"TCIRG1\"    \"CD55\"      \"TRIM15\"   \n [71] \"RPS2\"      \"CXCL5\"     \"LDHA\"      \"PI3\"       \"TGFBI\"     \"RASSF2\"    \"KCND3\"    \n [78] \"CEACAM6\"   \"CDCA7\"    ",
        " \"MIA\"       \"CASP1\"     \"PTGS1\"     \"KNTC1\"     \"FUT6\"     \n [85] \"GALNT2\"    \"ITGA5\"     \"NPM1\"      \"RGL1\"      \"FCER1G\"    \"PGM2\"      \"TAP2\"     \n [92] \"PTAFR\"     \"AGT\"       \"CEACAM1\"   \"PSME1\"     \"CSTB\"      \"UPP1\"      \"CCT6A\"    \n [99] \"MBD4\"      \"NAT1\"      \"TMSB10\"    \"SHMT2\"     \"DNMT1\"     \"PLEKHG2\"   \"ATP6V0D2\" \n[106] \"RNF183\"    \"CDC37\"     \"MICB\"      \"FOLH1\"     \"FCGR2B\"    \"HMOX1\"     \"RPN2\"     \n[113] \"CLEC10A\"   \"PLEKHO1\"   \"STEAP1\"    \"PROK2\"     \"TNFRSF10B\" \"SLC2A6\"    \"FANCD2\"   \n[120]",
        " \"PDIA4\"     \"C20orf24\"  \"MALL\"      \"RECQL\"     \"TRIM29\"    \"PPP1R14D\"  \"CDC42SE2\" \n[127] \"ATP6V1B2\"  \"PTGS2\"     \"ADORA2B\"   \"MME\"       \"VNN2\"      \"TRIM14\"    \"RAB31\"    \n[134] \"ACSL5\"     \"LYN\"       \"CMTM2\"     \"STARD5\"    \"FAS\"       \"AGMAT\"     \"CRYZ\"     \n[141] \"TLR6\"      \"ZFP36\"     \"BRCA1\"     \"HSPE1\"     \"MEOX1\"     \"SLC2A3\"    \"HPS5\"     \n[148] \"HPSE\"      \"KIAA0101\"  \"TNIP3\"     \"CSTF2\"     \"LRRK1\"     \"CBWD5\"     \"DHRS9\"    \n[155] \"LAP3\"      \"CFI\"       \"FUT3\"      \"CCL26\"     \"CEBPE\"     \"COL5A2\"   ",
        " \"SLC16A3\"  \n[162] \"TNFRSF11A\" \"CXCL9\"     \"THOP1\"     \"RPS19\"     \"PARP9\"     \"TEAD4\"     \"CEACAM7\"  \n[169] \"FAM3D\"     \"IRF1\"      \"AGPAT4\"    \"DUSP5\"     \"GZMB\"      \"RB1\"       \"ODC1\"     \n[176] \"ITGA2\"     \"NFKBIZ\"    \"PSME2\"     \"CFLAR\"     \"ITGB2\"     \"GM2A\"      \"PSMB9\"    \n[183] \"CCL20\"     \"ZYX\"       \"CLDN12\"    \"APOL1\"     \"LUM\"       \"UCN\"       \"CASP4\"    \n[190] \"LUC7L\"     \"KYNU\"      \"CD1B\"      \"PPRC1\"     \"CTSS\"      \"ARL11\"     \"SND1\"     \n[197] \"CD300LF\"   \"ATF3\"      \"MTHFD2\"    \"MR1\"      ",
        " \"LACTB\"     \"SOD2\"      \"RNGTT\"    \n[204] \"NCF4\"      \"SEC23A\"    \"GFOD1\"     \"HLA-DRA\"   \"ID1\"       \"COL6A3\"    \"MAP2K1\"   \n[211] \"GNB4\"      \"CCT7\"      \"CYP27A1\"   \"UBE2J1\"    \"ADAMDEC1\"  \"MMP3\"      \"NOC3L\"    \n[218] \"ACOT7\"     \"RRM2\"      \"SERPING1\"  \"RFC3\"      \"RIPK3\"     \"ENPP2\"     \"EED\"      \n[225] \"RCN1\"      \"LRRC25\"    \"BCL11B\"    \"LYSMD2\"    \"HHIP\"      \"BST1\"      \"C8orf4\"   \n[232] \"MTMR11\"    \"OAS1\"      \"MNDA\"      \"CHST2\"     \"SWAP70\"    \"MTDH\"      \"MICAL1\"   \n[239] \"ATP1B3\"    \"CTSK\"     ",
        " \"HSPA8\"     \"ATR\"       \"C4BPA\"     \"CTSC\"      \"SLC5A1\"   \n[246] \"PLA2G3\"    \"SLAMF8\"    \"KCNK12\"    \"CCNB3\"     \"PRSS3\"     \"TLR8\"      \"RGS18\"    \n[253] \"CCDC60\"    \"IFNGR1\"    \"CD244\"     \"UBD\"       \"MCAM\"      \"PLA2G7\"    \"MCM10\"    \n[260] \"MAP3K6\"    \"EMB\"       \"SLC28A3\"   \"SPATS1\"    \"HLA-DMA\"   \"SLC37A1\"   \"LAIR2\"    \n[267] \"HLA-DPA1\"  \"SH3KBP1\"   \"PGAM1\"     \"PKIA\"      \"NMI\"       \"SERTAD4\"   \"ENPP6\"    \n[274] \"FCGR3A\"    \"STAT1\"     \"GMDS\"      \"LCN2\"      \"FGL2\"      \"AP2S1\"     \"SRP72\"    \n[281]",
        " \"MUC13\"     \"DNM1L\"     \"POLD3\"     \"PLA2G4A\"   \"RAC2\"      \"BAK1\"      \"PARP14\"   \n[288] \"CHL1\"      \"IGSF6\"     \"KIAA1033\"  \"TRAF3\"     \"FGR\"       \"BRCA2\"     \"CD1C\"     \n\n$negGeneNames\n  [1] \"CYB5A\"     \"NEDD4L\"    \"PDCD4\"     \"PTTG1IP\"   \"NFIB\"      \"FGD4\"      \"DPY19L4\"  \n  [8] \"GOLGA7\"    \"LEPROT\"    \"STX12\"     \"CLN5\"      \"PXMP2\"     \"ETV2\"      \"ZNF615\"   \n [15] \"MAPKAP1\"   \"COBL\"      \"SLC26A7\"   \"SLC16A7\"   \"GPRC5C\"    \"RHOT1\"     \"ADI1\"     \n [22] \"DHRS2\"     \"LAMP2\"     \"SSBP3\"     \"VAMP2\"    ",
        " \"SAMD13\"    \"CA9\"       \"TMEM14B\"  \n [29] \"TMEM14C\"   \"PPP2R3A\"   \"UBE2E3\"    \"TIMM17B\"   \"AMOT\"      \"HPCAL1\"    \"ZNF565\"   \n [36] \"PDIK1L\"    \"ARAF\"      \"SPHAR\"     \"DNAJB2\"    \"BTBD3\"     \"XK\"        \"GLUL\"     \n [43] \"PMF1\"      \"RGMB\"      \"DNAJC19\"   \"SUCLG2\"    \"COBLL1\"    \"NR2F2\"     \"PLA2G12A\" \n [50] \"ANKRD29\"   \"BZW2\"      \"ZBTB10\"    \"NMD3\"      \"ZNF347\"    \"C6orf120\"  \"ZNF585B\"  \n [57] \"ZNF420\"    \"PTPRK\"     \"ALDH1A1\"   \"ENPP4\"     \"NNT\"       \"TPST1\"     \"ISOC1\"    \n [64] \"MPPE1\"     \"GUCA2B\"   ",
        " \"KCNMB2\"    \"MAML3\"     \"KCNJ12\"    \"UCK1\"      \"SPATA7\"   \n [71] \"REEP5\"     \"UBL3\"      \"ZNF395\"    \"DUSP19\"    \"SIDT2\"     \"LAPTM4A\"   \"PODXL2\"   \n [78] \"GSTO2\"     \"ARHGAP24\"  \"IGFBP2\"    \"MFSD4\"     \"NEBL\"      \"SLC22A15\"  \"HNMT\"     \n [85] \"KCNJ15\"    \"HDDC3\"     \"DCXR\"      \"FAM107B\"   \"KBTBD3\"    \"ALDH6A1\"   \"FOXP4\"    \n [92] \"ZNF626\"    \"ACADL\"     \"KCTD3\"     \"TSPYL4\"    \"GRHL2\"     \"CMTM8\"     \"CGNL1\"    \n [99] \"GTPBP6\"    \"PUM2\"      \"TSPYL1\"    \"EIF2AK2\"   \"KIAA0141\"  \"DCBLD2\"    \"TMTC4\"    \n[106]",
        " \"TOR1AIP1\"  \"TOMM7\"     \"SPIN3\"     \"HIST2H2BE\" \"EBAG9\"     \"ZNF682\"    \"BRI3\"     \n[113] \"CSTF2T\"    \"SS18L1\"    \"TOB1\"      \"LRRC61\"    \"PEX7\"      \"FAAH\"      \"TMEM59\"   \n[120] \"KLK11\"     \"GLRX5\"     \"DHX32\"     \"ABCA2\"     \"RCOR3\"     \"SFTPD\"     \"DPT\"      \n[127] \"HDHD2\"     \"COMMD6\"    \"RNF130\"    \"SOCS5\"     \"EPN1\"      \"LMO4\"      \"DPPA5\"    \n[134] \"CDIPT\"     \"SCARB2\"    \"SBF2\"      \"DNAJA2\"    \"PIWIL2\"    \"BMPR1A\"    \"C9orf50\"  \n[141] \"ZNF285\"    \"APBB2\"     \"VLDLR\"     \"EPHX1\"     \"SSNA1\"     \"USP47\"    ",
        " \"PPP2R5A\"  \n[148] \"NOSTRIN\"   \"SCNN1B\"    \"KCTD1\"     \"PSD4\"      \"DBT\"       \"NT5M\"      \"NFIC\"     \n[155] \"CITED2\"    \"OPHN1\"     \"KIAA1191\"  \"KIAA0895\"  \"HMOX2\"     \"TATDN1\"    \"HDAC5\"    \n[162] \"MPZ\"       \"AKR7A3\"    \"TSPAN12\"   \"KLHDC2\"    \"FBXL17\"    \"RAB5C\"     \"CRBN\"     \n[169] \"MARVELD2\"  \"PREPL\"     \"RNF10\"     \"ACSL3\"     \"NRK\"       \"BRD3\"      \"C12orf29\" \n[176] \"CCDC33\"    \"ZBTB3\"     \"CREB3L4\"   \"LIFR\"      \"TXNIP\"     \"CTDSP1\"    \"RAB4A\"    \n[183] \"SMUG1\"     \"NFIA\"      \"TRAPPC6A\"  \"PYGO2\"    ",
        " \"ERBB4\"     \"SUDS3\"     \"NDFIP1\"   \n[190] \"CBR1\"      \"TSPAN31\"   \"OSBPL9\"    \"DPP10\"     \"PROC\"      \"GABARAPL2\" \"APLP2\"    \n[197] \"TBC1D19\"   \"GRB7\"      \"FGF4\"      \"ATG9A\"     \"MTMR12\"    \"RASSF3\"    \"SLC27A1\"  \n[204] \"ZNF85\"     \"GTDC1\"     \"SLC38A2\"   \"TINAGL1\"   \"PPP1R13B\"  \"SERPINA4\"  \"SLC17A6\"  \n[211] \"BTBD9\"     \"MT1F\"      \"ST7\"       \"ABCB5\"     \"ZNF30\"     \"SARS\"      \"MAMDC2\"   \n[218] \"ZNF468\"    \"HKR1\"      \"MT1E\"      \"ZFAND1\"    \"PPFIBP2\"   \"ZNF713\"    \"PCDHGA7\"  \n[225] \"TYR\"       \"LMBRD1\"   ",
        " \"STRC\"      \"HIP1R\"     \"EPHB3\"     \"FGF13\"     \"CPNE3\"    \n[232] \"ATP7A\"     \"MRPS36\"    \"FSIP2\"     \"BBOX1\"     \"ANKMY2\"    \"ESRRG\"     \"ANKRD27\"  \n[239] \"ZNF93\"     \"SHANK2\"    \"PROSC\"     \"IL27\"      \"ZNF579\"    \"APLP1\"     \"MITF\"     \n[246] \"MTFR1\"     \"MBTPS1\"    \"PTPN9\"     \"ECHDC3\"    \"PRRG2\"     \"RGS7\"      \"SESN1\"    \n[253] \"EPB41L4B\"  \"HMGN2\"     \"MYOM2\"     \"KCNJ16\"    \"FBXL13\"    \"ZNF570\"    \"SLC29A1\"  \n[260] \"ZNF254\"    \"PHKB\"      \"ME2\"       \"TDRD3\"     \"AGPAT1\"    \"LRRC17\"    \"MKRN1\"    \n[267]",
        " \"NIPSNAP3A\" \"ZNF614\"    \"PHYHD1\"    \"CAMTA1\"    \"AK5\"       \"BGLAP\"     \"WASF3\"    \n[274] \"TBC1D8\"    \"ALKBH5\"    \"RANBP3\"    \"ZNF32\"     \"SMPDL3B\"   \"BSPRY\"     \"CCDC28A\"  \n[281] \"FBP2\"      \"SFRP1\"     \"HYAL3\"     \"CGRRF1\"    \"VAMP4\"     \"KIF13B\"    \"SMG5\"     \n[288] \"ZNF345\"    \"SUPT4H1\"   \"SNTA1\"     \"CNTN3\"     \"SIRT4\"     \"PRDX6\"     \"TMPRSS6\"  \n[295] \"NAPA\"      \"OBFC1\"     \"PGAP1\"     \"FGB\"       \"ZNF577\"    \"SLC9A3R2\"  \"SEZ6L2\"   \n[302] \"MRPS18A\"   \"SORBS1\"    \"KCTD2\"     \"SORBS2\"    \"ARTN\"      \"ASPA\"     ",
        " \"WBP2\"     \n[309] \"MKRN2\"     \"KLHDC3\"    \"LHX9\"      \"BLOC1S1\"   \"PGRMC2\"    \"PFDN5\"     \"IL1RL2\"   \n[316] \"BOLA1\"     \"CCDC13\"    \"PCDHGA8\"   \"EPM2A\"     \"KCNQ5\"     \"DNAJC5\"    \"CKMT2\"    \n[323] \"CAMTA2\"    \"DPM3\"      \"FBXO25\"    \"KLK4\"      \"SMTN\"      \"BTBD2\"     \"KIAA1522\" \n[330] \"ARHGEF10\"  \"FPGT\"      \"HINT2\"     \"ZNF451\"    \"FBXO3\"     \"TCEAL8\"    \"R3HDM2\"   \n[337] \"MYNN\"      \"GRAMD1C\"   \"PTP4A1\"    \"BTBD6\"     \"PTPRU\"     \"ANKS1A\"    \"NDUFB2\"   \n[344] \"ZNF616\"    \"SLC12A2\"   \"OR10A5\"    \"PCDHB13\"  ",
        " \"NFE2L2\"    \"KIAA0556\"  \"POLR3GL\"  \n[351] \"GCM1\"      \"B3GAT3\"    \"OPA1\"      \"THAP8\"     \"COMT\"      \"GOLPH3L\"   \"GTF2IRD2\" \n[358] \"WDSUB1\"    \"DNASE1L1\"  \"FBXL4\"     \"NIPSNAP3B\" \"HIST1H2BO\" \"CSPG5\"     \"CHRFAM7A\" \n[365] \"ACACB\"     \"HPRT1\"     \"STX19\"     \"ZNF14\"     \"PARP16\"    \"DMRTA1\"    \"GCA\"      \n[372] \"DNAL4\"     \"CYP39A1\"   \"ZNF480\"    \"PBX1\"      \"ZNF564\"    \"CREBL2\"    \"ASPSCR1\"  \n[379] \"KIAA1841\"  \"ADIPOR2\"   \"SUPT3H\"    \"C16orf52\"  \"ASB11\"     \"BRD7\"      \"ZSCAN4\"   \n[386] \"SH3BP4\"    \"PIK3R1\"   ",
        " \"ASPHD1\"    \"AQP4\"      \"SPINK7\"    \"ZNF606\"    \"UBL4A\"    \n[393] \"DCTD\"      \"TAS2R50\"   \"BRAF\"      \"SIRT5\"     \"ACAD10\"    \"DPY19L2\"   \"RIMBP2\"   \n[400] \"ARHGEF4\"   \"ZNF613\"    \"TRPC5\"     \"HBEGF\"     \"FOXP1\"     \"MAGEA1\"    \"PRDM13\"   \n[407] \"FLJ40288\"  \"LONRF2\"    \"CYP2F1\"    \"GPM6B\"     \"AHCTF1\"    \"KCNJ4\"     \"RERG\"     \n[414] \"RYK\"       \"SNX24\"     \"HSPB6\"     \"DMRT1\"     \"ZNF441\"    \"UBE2D4\"    \"ZNF502\"   \n[421] \"MOCS2\"     \"PXMP4\"     \"FARP1\"     \"CLCN5\"     \"FBXO9\"     \"MTSS1\"     \"SPAG7\"    \n[428]",
        " \"GLUD1\"     \"ATP5E\"     \"PNPLA4\"    \"TXNDC8\"    \"ADIPOR1\"   \"WNK2\"      \"GULP1\"    \n[435] \"MT1M\"      \"CHRDL1\"    \"GPT2\"      \"MKL2\"      \"PTK2\"      \"UNC5A\"     \"FYCO1\"    \n[442] \"POLR2I\"    \"MT1X\"      \"OSBPL8\"    \"NUCKS1\"    \"KCNE2\"     \"CAB39L\"    \"ZMAT5\"    \n[449] \"RSAD1\"     \"ADRB2\"     \"HOXD10\"    \"IGF1R\"     \"EXTL2\"     \"UCN3\"      \"C11orf1\"  \n[456] \"SPACA4\"    \"BCKDHA\"    \"DHRS7\"     \"PDIA2\"     \"TFR2\"      \"ZDHHC24\"   \"SLITRK2\"  \n[463] \"CYP19A1\"   \"LRFN3\"     \"BIVM\"      \"MT2A\"      \"CPEB3\"     \"DLX3\"     ",
        " \"SEMA3C\"   \n[470] \"ZNF197\"    \"GTF3C1\"    \"MUM1L1\"    \"CD46\"      \"CUEDC1\"    \"TRAF6\"     \"CHIT1\"    \n[477] \"PCDHGA12\"  \"PRM2\"      \"NUDT14\"    \"CMTM4\"     \"SERINC1\"   \"SAMD10\"    \"CELSR1\"   \n[484] \"BAHD1\"     \"TMEM86B\"   \"TEX2\"      \"CTPS2\"     \"POLR2C\"    \"POLR1D\"    \"LZTS2\"    \n[491] \"ANKRD22\"   \"GPBP1L1\"   \"POGK\"      \"LENG1\"     \"DHCR24\"    \"ZSCAN2\"    \"POLDIP3\"  \n[498] \"PRELP\"     \"ZNF24\"     \"CUL5\"      \"PIGN\"      \"ARHGEF9\"   \"HMBOX1\"    \"SUMO1\"    \n[505] \"ZNF396\"    \"THRA\"      \"GNAT1\"     \"CDC14B\"   ",
        " \"KIAA1324\"  \"NDUFC1\"    \"ME3\"      \n[512] \"ZNF618\"    \"CYB5R1\"    \"CSH1\"      \"IGF2BP2\"   \"WDR33\"     \"PCDHGC4\"   \"KCNQ1DN\"  \n[519] \"ULK2\"      \"ADHFE1\"    \"FBXW4\"     \"GATA4\"     \"CDH8\"      \"PCBD2\"     \"SYT17\"    \n[526] \"DEFB1\"     \"GNB1\"      \"APTX\"      \"LRRC27\"    \"ZMAT4\"     \"RARB\"      \"ZDHHC23\"  \n[533] \"PACSIN2\"   \"ZCRB1\"     \"ELF2\"      \"ZNF557\"    \"C11orf52\"  \"CLN8\"      \"MOAP1\"    \n[540] \"C6orf106\"  \"PCDHGB3\"   \"CTBS\"      \"AES\"       \"NF1\"       \"TTLL9\"     \"CMA1\"     \n[547] \"FRY\"       \"TCEA3\"    ",
        " \"FHL1\"      \"GNAZ\"      \"SLC39A1\"   \"RABGAP1\"   \"CHRNA7\"   \n[554] \"GLI2\"      \"MSRA\"      \"PCDHGB4\"   \"PTGIS\"     \"EIF4E3\"    \"TGIF2LY\"   \"TGFBRAP1\" \n[561] \"ARMC7\"     \"PPIE\"      \"RAB17\"     \"CRX\"       \"EGFR\"      \"DCTN2\"     \"ZNF329\"   \n[568] \"KLHL1\"     \"NUDT3\"     \"GATAD2B\"   \"MARCH4\"    \"PAPSS1\"    \"PLEKHJ1\"   \"THRB\"     \n[575] \"ZNF33A\"    \"ZNF540\"    \"TCFL5\"     \"GPRASP2\"   \"T\"         \"STX10\"     \"GRIPAP1\"  \n[582] \"IRF6\"      \"PIGS\"      \"MARCH5\"    \"ZNF740\"    \"THUMPD2\"   \"SLCO1A2\"  \n\n$effectSizeThresh\n",
        "[1] 0\n\n$FDRThresh\n[1] 0.05\n\n$numberStudiesThresh\n[1] 4\n\n$heterogeneityPvalThresh\n[1] 0\n\n$isLeaveOneOut\n[1] FALSE\n\n$filterDescription\n[1] \"MetaFilter from version 1.0\"\n\n$timestamp\n[1] \"2020-09-27 19:38:40 EDT\"\n\n",
        "> ",
        "",
        "> ",
        "PositiveGenes <- filter$posGeneNames",
        "> ",
        "NegativeGenes <- filter$negGeneNames",
        "> ",
        "#save(PositiveGenes, NegativeGenes, file = \"./Objs/NewSigGenes_Pre.rda\")",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "## Summarize filter results",
        "> ",
        "filter_summary <- summarizeFilterResults(metaObject = HPylori_metaanalysis, getMostRecentFilter(HPylori_metaanalysis))",
        "> ",
        "#save(New_filter, file = \"./Objs/NewFilter.rda\")",
        "> ",
        "load(\"./Objs/NewFilter.rda\")",
        "> ",
        "HPylori_metaanalysis$filterResults$FDR0.05_es0_nStudies4_looaFALSE_hetero0$posGeneNames <- New_filter$posGeneNames",
        "> ",
        "HPylori_metaanalysis$filterResults$FDR0.05_es0_nStudies4_looaFALSE_hetero0$negGeneNames <- New_filter$negGeneNames",
        "> ",
        "",
        "> ",
        "New_filter <- HPylori_metaanalysis$filterResults[[1]]",
        "> ",
        "New_filter_summary <- summarizeFilterResults(metaObject = HPylori_metaanalysis, getMostRecentFilter(HPylori_metaanalysis))",
        "> ",
        "PositiveGenes <- New_filter$posGeneNames",
        "> ",
        "PositiveGenes",
        "  [1] \"CCL20\"     \"GNA15\"     \"SULF2\"     \"TNIP3\"     \"PROS1\"     \"PDZK1IP1\"  \"HSP90AA1\" \n  [8] \"TMC5\"      \"ANXA4\"     \"ZC3H12A\"   \"PSMA1\"     \"MLKL\"      \"KPNB1\"     \"TNIK\"     \n [15] \"SERPINA3\"  \"HSPA4\"     \"THY1\"      \"TNFRSF1B\"  \"BATF\"      \"NBN\"       \"HM13\"     \n [22] \"ASRGL1\"    \"PTGS1\"     \"HIF1A\"     \"RB1\"       \"CSTB\"      \"CFLAR\"     \"DNAJA1\"   \n [29] \"GM2A\"      \"SLC4A11\"   \"PPA1\"      \"PPRC1\"     \"GCH1\"      \"NPM1\"      \"CD1B\"     \n [36] \"CARD9\"     \"GPNMB\"     \"HSP90B1\"   \"MCL1\"      \"CRELD2\"   ",
        " \"TMSB10\"    \"AGPAT4\"   \n [43] \"HLA-DQA2\"  \"JAK2\"      \"CD44\"      \"RASSF2\"    \"RPS2\"      \"MTHFD2\"    \"RGL1\"     \n [50] \"FCER1G\"    \"ITGB2\"     \"PGM2\"      \"RPS19\"     \"GNB4\"      \"CCT6A\"     \"ATP6V0D2\" \n [57] \"SYK\"       \"MBD4\"      \"RECQL\"     \"MR1\"       \"NOC3L\"     \"SNX10\"     \"HMOX1\"    \n [64] \"HSPA8\"     \"CD40LG\"    \"TREM1\"     \"RNF183\"    \"DNMT1\"     \"GZMB\"      \"C20orf24\" \n [71] \"HLA-DRA\"   \"LYSMD2\"    \"GALNT2\"    \"PROK2\"     \"SLC6A14\"   \"KCNE3\"     \"GJB2\"     \n [78] \"CKLF\"      \"SCO2\"      \"STEAP1\"   ",
        " \"MNDA\"      \"PLEKHG2\"   \"CXCL9\"     \"NINJ2\"    \n [85] \"TAP2\"      \"FANCD2\"    \"CDC42SE2\"  \"ZYX\"       \"MAP3K6\"    \"CLEC10A\"   \"HSPE1\"    \n [92] \"RCN1\"      \"SWAP70\"    \"SPATS1\"    \"GBP1\"      \"ENTPD1\"    \"RAB31\"     \"RPN2\"     \n [99] \"SLC28A3\"   \"CMTM2\"     \"ZFP36\"     \"CEBPE\"     \"FAM3D\"     \"C4BPA\"     \"ATP6V1B2\" \n[106] \"NFKBIZ\"    \"ADORA2B\"   \"TLR6\"      \"PSMB8\"     \"ITGA5\"     \"ENPP6\"     \"LRRC25\"   \n[113] \"IRF1\"      \"SRP72\"     \"HLA-DMA\"   \"KIAA1033\"  \"LCN2\"      \"WARS\"      \"CCT7\"     \n[120] \"PKIA\"     ",
        " \"KCND3\"     \"CD300LF\"   \"SHMT2\"     \"CDC37\"     \"GMDS\"      \"POLD3\"    \n[127] \"FGR\"       \"PRR5\"      \"HHIP\"      \"HLA-DPA1\"  \"SND1\"      \"BAK1\"      \"DNM1L\"    \n[134] \"MTDH\"      \"ENPP2\"     \"PSME1\"     \"COL5A2\"    \"NUP62\"     \"TRAF3\"     \"LUM\"      \n[141] \"CRYZ\"      \"SLC2A3\"    \"PARP14\"    \"AP2S1\"     \"LPIN1\"     \"GK\"        \"DHRS9\"    \n[148] \"CCL26\"     \"SLC7A7\"    \"ARL9\"      \"HSD3B7\"    \"TGFBI\"     \"UCN\"       \"CXCL5\"    \n[155] \"MCM5\"      \"LDHA\"      \"ATR\"       \"CHST2\"     \"PLEKHO1\"   \"PSME2\"     \"CTSC\"     ",
        "\n[162] \"IGSF6\"     \"KYNU\"      \"CDCA7\"     \"SOD2\"      \"RGS18\"     \"CHL1\"      \"GCNT3\"    \n[169] \"CASP1\"     \"EED\"       \"SERTAD4\"   \"ODC1\"      \"IFNGR1\"    \"MICB\"      \"CBWD5\"    \n[176] \"PLA2G7\"    \"ATF3\"      \"LUC7L\"     \"SERPING1\"  \"CASP4\"     \"SH3KBP1\"   \"PARP9\"    \n[183] \"PDIA4\"     \"CTSK\"      \"FGL2\"      \"CD244\"     \"TNFRSF10B\" \"CD1C\"      \"LACTB\"    \n[190] \"TMPRSS3\"   \"TLR8\"      \"RNGTT\"     \"C8orf4\"    \"RAC2\"      \"UBE2J1\"    \"MCAM\"     \n[197] \"MAP2K1\"    \"ETS2\"      \"NCF2\"      \"HPS5\"      \"STAT1\"    ",
        " \"FCGR2B\"    \"VNN2\"     \n[204] \"MMP12\"     \"DGKA\"      \"LAP3\"      \"ID1\"       \"SLC2A6\"    \"C5AR1\"     \"UBD\"      \n[211] \"GPRC5A\"    \"AGT\"       \"PI3\"       \"LRRK1\"     \"PTGS2\"     \"TCIRG1\"    \"MIA\"      \n[218] \"LYN\"       \"ADAMDEC1\"  \"COL6A3\"    \"PLA2G3\"    \"KNTC1\"     \"SLAMF8\"    \"MICAL1\"   \n[225] \"CLDN12\"   \n",
        "> ",
        "NegativeGenes <- New_filter$negGeneNames",
        "> ",
        "NegativeGenes",
        "  [1] \"EPM2A\"     \"PDCD4\"     \"CYB5A\"     \"ISOC1\"     \"MAPKAP1\"   \"PMF1\"      \"HNMT\"     \n  [8] \"GOLGA7\"    \"UCK1\"      \"AMOT\"      \"TMEM14C\"   \"TOMM7\"     \"TMEM59\"    \"NFIB\"     \n [15] \"SUCLG2\"    \"KCTD3\"     \"LAPTM4A\"   \"GLRX5\"     \"PTTG1IP\"   \"DPPA5\"     \"ADI1\"     \n [22] \"UBE2E3\"    \"LRRC61\"    \"ARAF\"      \"DNAJB2\"    \"PUM2\"      \"C6orf120\"  \"FBXL17\"   \n [29] \"XK\"        \"EIF2AK2\"   \"MAML3\"     \"COMMD6\"    \"TOB1\"      \"FAAH\"      \"TMEM14B\"  \n [36] \"NT5M\"      \"SCARB2\"    \"DNAJA2\"    \"BRI3\"      \"RAB5C\"    ",
        " \"EPHX1\"     \"NRK\"      \n [43] \"TOR1AIP1\"  \"MARVELD2\"  \"BRD3\"      \"SMUG1\"     \"KIAA0141\"  \"ZNF565\"    \"SARS\"     \n [50] \"SUDS3\"     \"GABARAPL2\" \"APLP2\"     \"PTPRK\"     \"ETV2\"      \"NNT\"       \"OPHN1\"    \n [57] \"APBB2\"     \"NDFIP1\"    \"CBR1\"      \"VAMP2\"     \"KCTD1\"     \"SPIN3\"     \"MRPS36\"   \n [64] \"TINAGL1\"   \"SAMD13\"    \"ATG9A\"     \"BTBD9\"     \"HPCAL1\"    \"FGF4\"      \"PRRG2\"    \n [71] \"PROSC\"     \"TPST1\"     \"PRDX6\"     \"GTPBP6\"    \"ZNF614\"    \"CTDSP1\"    \"STRC\"     \n [78] \"TDRD3\"     \"TSPAN12\"   \"HMGN2\"    ",
        " \"MKRN1\"     \"PGAP1\"     \"PDIK1L\"    \"NAPA\"     \n [85] \"DNAJC5\"    \"RNF10\"     \"PGRMC2\"    \"SMPDL3B\"   \"TCEAL8\"    \"ALKBH5\"    \"MT1E\"     \n [92] \"SMG5\"      \"AGPAT1\"    \"OBFC1\"     \"MT1F\"      \"AKR7A3\"    \"PTP4A1\"    \"COMT\"     \n [99] \"GUCA2B\"    \"FPGT\"      \"TSPYL1\"    \"KCTD2\"     \"BGLAP\"     \"MRPS18A\"   \"NDUFB2\"   \n[106] \"BBOX1\"     \"MYOM2\"     \"PHKB\"      \"ZNF345\"    \"DPM3\"      \"SMTN\"      \"THAP8\"    \n[113] \"HDHD2\"     \"KLHDC3\"    \"GOLPH3L\"   \"NIPSNAP3B\" \"SPHAR\"     \"SH3BP4\"    \"CCDC13\"   \n[120] \"BOLA1\"    ",
        " \"OR10A5\"    \"BZW2\"      \"SUPT4H1\"   \"MAGEA1\"    \"DNAJC19\"   \"SLC17A6\"  \n[127] \"TXNIP\"     \"ACACB\"     \"ACAD10\"    \"PTPRU\"     \"ATP5E\"     \"MKRN2\"     \"FBXO3\"    \n[134] \"ZNF451\"    \"DPY19L2\"   \"CLN5\"      \"PPP2R5A\"   \"RYK\"       \"BLOC1S1\"   \"STX19\"    \n[141] \"CHRDL1\"    \"ZNF468\"    \"ZDHHC24\"   \"FBXO25\"    \"BTBD6\"     \"BIVM\"      \"DNASE1L1\" \n[148] \"GLUD1\"     \"TAS2R50\"   \"SSBP3\"     \"WNK2\"      \"PODXL2\"    \"ZNF502\"    \"ZNF197\"   \n[155] \"ZNF564\"    \"C11orf1\"   \"SERINC1\"   \"GPBP1L1\"   \"SUMO1\"     \"KLHDC2\"    \"CTPS2\"    ",
        "\n[162] \"NDUFC1\"    \"PTK2\"      \"GNB1\"      \"RAB4A\"     \"ZNF557\"    \"CPNE3\"     \"GRIPAP1\"  \n[169] \"ZNF14\"     \"SPATA7\"    \"LRFN3\"     \"ADIPOR2\"   \"FHL1\"      \"SS18L1\"    \"EIF4E3\"   \n[176] \"FBXW4\"     \"PIGS\"      \"MT1X\"      \"NIPSNAP3A\" \"IGF2BP2\"   \"MYNN\"      \"BTBD2\"    \n[183] \"MOCS2\"     \"PLEKHJ1\"   \"ADRB2\"     \"CGRRF1\"    \"GTF3C1\"    \"APTX\"      \"SLC39A1\"  \n[190] \"POLR3GL\"   \"RAB17\"     \"MARCH5\"    \"C6orf106\"  \"LRRC27\"    \"ZNF740\"    \"FBXO9\"    \n[197] \"BRD7\"      \"BAHD1\"     \"ZNF24\"     \"ZDHHC23\"   \"CUL5\"     ",
        " \"EBAG9\"    \n",
        "> ",
        "###############################################################################",
        "> ",
        "## Gene set enrichment analysis",
        "> ",
        "library(enrichR)",
        "> ",
        "library(clusterProfiler)",
        "> ",
        "# annotate canExpr2 (illumina)",
        "> ",
        "Pos_EntID<- mapIds(org.Hs.eg.db,",
        "+ ",
        "                             keys=PositiveGenes,",
        "+ ",
        "                             column=\"ENTREZID\",",
        "+ ",
        "                             keytype=\"SYMBOL\",",
        "+ ",
        "                             multiVals=\"first\")",
        "'select()' returned 1:1 mapping between keys and columns\n",
        "> ",
        "Neg_EntID<- mapIds(org.Hs.eg.db,",
        "+ ",
        "                   keys=NegativeGenes,",
        "+ ",
        "                   column=\"ENTREZID\",",
        "+ ",
        "                   keytype=\"SYMBOL\",",
        "+ ",
        "                   multiVals=\"first\")",
        "'select()' returned 1:1 mapping between keys and columns\n",
        "> ",
        "## GO BPs",
        "> ",
        "Pos_GO_BPs <- enrichGO(",
        "+ ",
        "  Pos_EntID,",
        "+ ",
        "  org.Hs.eg.db,",
        "+ ",
        "  keyType = \"ENTREZID\",",
        "+ ",
        "  ont = \"BP\",",
        "+ ",
        "  pvalueCutoff = 0.05,",
        "+ ",
        "  pAdjustMethod = \"BH\",",
        "+ ",
        "  universe,",
        "+ ",
        "  qvalueCutoff = 0.2,",
        "+ ",
        "  minGSSize = 10,",
        "+ ",
        "  maxGSSize = 500,",
        "+ ",
        "  readable = FALSE,",
        "+ ",
        "  pool = FALSE",
        "+ ",
        ")",
        "Error: database or disk is full\n",
        "> ",
        "## GO BPs",
        "> ",
        "Pos_GO_BPs <- enrichGO(",
        "+ ",
        "  Pos_EntID,",
        "+ ",
        "  org.Hs.eg.db,",
        "+ ",
        "  keyType = \"ENTREZID\",",
        "+ ",
        "  ont = \"BP\",",
        "+ ",
        "  pvalueCutoff = 0.05,",
        "+ ",
        "  pAdjustMethod = \"BH\",",
        "+ ",
        "  universe,",
        "+ ",
        "  qvalueCutoff = 0.2,",
        "+ ",
        "  minGSSize = 10,",
        "+ ",
        "  maxGSSize = 500,",
        "+ ",
        "  readable = FALSE,",
        "+ ",
        "  pool = FALSE",
        "+ ",
        ")",
        "`universe` is not in character and will be ignored...\n",
        "> ",
        "P1 <- barplot(Pos_GO_BPs, showCategory=20)",
        "> ",
        "P1",
        "Error in grid.newpage() : \n  QuartzBitmap_Output - unable to open file '/var/folders/c_/nl8___8x69d3krgh6jtrcc_40000gn/T//Rtmp8J4DPV/0078dea415ed487bad5aeb00fb040399.png'\n",
        "> ",
        "graphics.off()",
        "Error in .External(C_devoff, as.integer(which)) : \n  QuartzBitmap_Output - unable to open file '/var/folders/c_/nl8___8x69d3krgh6jtrcc_40000gn/T//Rtmp8J4DPV/0078dea415ed487bad5aeb00fb040399.png'\n",
        "Graphics error: Plot rendering error\n",
        "> ",
        "P1 <- barplot(Pos_GO_BPs, showCategory=20)",
        "> ",
        "P1",
        "Error in gzfile(file, \"wb\") : cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In gzfile(file, \"wb\") :",
        "\n ",
        " cannot open compressed file '/var/folders/c_/nl8___8x69d3krgh6jtrcc_40000gn/T/Rtmp8J4DPV/rs-graphics-89884fc1-fb30-4bd4-80c4-25cad2a32635/9ae81c52-7171-4205-bac6-f8d6a60b8671.snapshot', probable reason 'No space left on device'\n",
        "Graphics error: Plot rendering error\n",
        "Error in gzfile(file, \"wb\") : cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In gzfile(file, \"wb\") :",
        "\n ",
        " cannot open compressed file '/var/folders/c_/nl8___8x69d3krgh6jtrcc_40000gn/T/Rtmp8J4DPV/rs-graphics-89884fc1-fb30-4bd4-80c4-25cad2a32635/98370f0f-b4f4-4764-8d5a-7382b3cd15bb.snapshot', probable reason 'No space left on device'\n",
        "Graphics error: Plot rendering error\n",
        "Error in gzfile(file, \"wb\") : cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In gzfile(file, \"wb\") :",
        "\n ",
        " cannot open compressed file '/var/folders/c_/nl8___8x69d3krgh6jtrcc_40000gn/T/Rtmp8J4DPV/rs-graphics-89884fc1-fb30-4bd4-80c4-25cad2a32635/90d2cb14-6c87-49b5-844c-82ced756d176.snapshot', probable reason 'No space left on device'\n",
        "Graphics error: Plot rendering error\n",
        "> ",
        "graphics.off()",
        "Error in .External(C_devoff, as.integer(which)) : \n  QuartzBitmap_Output - unable to open file '/var/folders/c_/nl8___8x69d3krgh6jtrcc_40000gn/T//Rtmp8J4DPV/ea721d34c4a54b31a89bae482da737b6.png'\n",
        "Graphics error: Plot rendering error\n",
        "> ",
        "Neg_GO_BPs <- enrichGO(",
        "+ ",
        "  Neg_EntID,",
        "+ ",
        "  org.Hs.eg.db,",
        "+ ",
        "  keyType = \"ENTREZID\",",
        "+ ",
        "  ont = \"BP\",",
        "+ ",
        "  pvalueCutoff = 0.05,",
        "+ ",
        "  pAdjustMethod = \"BH\",",
        "+ ",
        "  qvalueCutoff = 0.2,",
        "+ ",
        "  minGSSize = 10,",
        "+ ",
        "  maxGSSize = 500,",
        "+ ",
        "  readable = FALSE,",
        "+ ",
        "  pool = FALSE",
        "+ ",
        ")",
        "> ",
        "P2 <- barplot(Neg_GO_BPs, showCategory=20)",
        "> ",
        "P2",
        "Error in gzfile(file, \"wb\") : cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In gzfile(file, \"wb\") :",
        "\n ",
        " cannot open compressed file '/var/folders/c_/nl8___8x69d3krgh6jtrcc_40000gn/T/Rtmp8J4DPV/rs-graphics-89884fc1-fb30-4bd4-80c4-25cad2a32635/b886b75a-d733-40e7-a4a5-0d2f259e9c72.snapshot', probable reason 'No space left on device'\n",
        "Graphics error: Plot rendering error\n",
        "Error in gzfile(file, \"wb\") : cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In gzfile(file, \"wb\") :",
        "\n ",
        " cannot open compressed file '/var/folders/c_/nl8___8x69d3krgh6jtrcc_40000gn/T/Rtmp8J4DPV/rs-graphics-89884fc1-fb30-4bd4-80c4-25cad2a32635/5f443d8d-2904-44e8-a98d-1db4b6aa4d91.snapshot', probable reason 'No space left on device'\n",
        "Graphics error: Plot rendering error\n",
        "> ",
        "View(Neg_GO_BPs@result)",
        "Error in gzfile(file, mode) : cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In gzfile(file, mode) :",
        "\n ",
        " cannot open compressed file '/var/folders/c_/nl8___8x69d3krgh6jtrcc_40000gn/T//Rtmp8J4DPV/rstudio-available-packages-48bb24f211a2/time.rds', probable reason 'No such file or directory'\n",
        "> ",
        "## KEGG",
        "> ",
        "Pos_KEGG <- enrichKEGG(",
        "+ ",
        "  Pos_EntID,",
        "+ ",
        "  organism = \"hsa\",",
        "+ ",
        "  keyType = \"kegg\",",
        "+ ",
        "  pvalueCutoff = 0.05,",
        "+ ",
        "  pAdjustMethod = \"BH\",",
        "+ ",
        "  qvalueCutoff = 0.2,",
        "+ ",
        "  minGSSize = 10,",
        "+ ",
        "  maxGSSize = 500,",
        "+ ",
        ")",
        "> ",
        "P3 <- barplot(Pos_KEGG, showCategory=20)",
        "> ",
        "Neg_KEGG <- enrichKEGG(",
        "+ ",
        "  Neg_EntID,",
        "+ ",
        "  organism = \"hsa\",",
        "+ ",
        "  keyType = \"kegg\",",
        "+ ",
        "  pvalueCutoff = 0.05,",
        "+ ",
        "  pAdjustMethod = \"BH\",",
        "+ ",
        "  qvalueCutoff = 0.2,",
        "+ ",
        "  minGSSize = 10,",
        "+ ",
        "  maxGSSize = 500,",
        "+ ",
        ")",
        "> ",
        "P4 <- barplot(Neg_KEGG, showCategory=20)",
        "> ",
        "P1/P2",
        "Error in grid.newpage() : \n  QuartzBitmap_Output - unable to open file '/var/folders/c_/nl8___8x69d3krgh6jtrcc_40000gn/T//Rtmp8J4DPV/654bfb1791c744578640a941ea0adfb8.png'\n",
        "> ",
        "rm(list = ls())",
        "\nRestarting R session...\n\n",
        "Error: QuartzBitmap_Output - unable to open file '/var/folders/c_/nl8___8x69d3krgh6jtrcc_40000gn/T//Rtmp8J4DPV/654bfb1791c744578640a941ea0adfb8.png'\n"
    ]
}

#########################################################################
## The metaanalysis

## Creating the meta object
AllDataSets <- list(Dataset1, Dataset2, Dataset3, Dataset4)
names(AllDataSets) <- c(Dataset1$formattedName, Dataset2$formattedName, Dataset3$formattedName, Dataset4$formattedName)

HPylori_Meta <- list()
HPylori_Meta$originalData <- AllDataSets

## Check the meta object before the metaanalysis
checkDataObject(HPylori_Meta, "Meta", "Pre-Analysis") ## If true, Proceed to the meta analysis

#HPylori_Meta <- geneSymbolCorrection(HPylori_Meta)

## Run the meta analysis
HPylori_metaanalysis <- runMetaAnalysis(HPylori_Meta, runLeaveOneOutAnalysis = F, maxCores = 3)

## Filter out significant genes from the metaanalysis results (this will be the gene signature that separates Metas from No_Mets)
HPylori_metaanalysis <- filterGenes(HPylori_metaanalysis, isLeaveOneOut = F, effectSizeThresh = 0, FDRThresh = 0.05, numberStudiesThresh = 4)


## Stats of all genes
AllGenes <- HPylori_metaanalysis$metaAnalysis$pooledResults

## The Jiang genes (19/20 genes) # IGJ is missing
Jiang_Sig <- c("PGC", "AKR1B10", "KCNE2", "CXCL17", "DPCR1", "CLDN18", "CTSE", "VSIG1", "MT1M", "COL6A3", "COL1A2", "OLFM4", "THBS2", "CTHRC1", "CEACAM6", "INHBA", "COL5A2", "ASPN", "CLDN7")

#OncoDx_Genes <- c("BGN", "COL1A1", "SFRP4", "FLNC", "GSN", "TPM2", "GSTM2", "TPX2", "LAMB3", "FAM13C", "KLK2", "AZGP1", "SRD5A2", "DUSP1", "FOS")
#save(Erho_Sig, file = "./Objs/Erho_Sig_Genes.rda")

summary(Jiang_Sig %in% rownames(AllGenes))


Jiang_Sig <- AllGenes[Jiang_Sig, ]
#OncoDx <- na.omit(OncoDx)

# Replace the gene names with the OncoDx genes
HPylori_metaanalysis$filterResults$FDR0.05_es0_nStudies4_looaFALSE_hetero0$posGeneNames <- c("COL6A3", "COL1A2", "OLFM4", "THBS2", "CTHRC1", "CEACAM6", "INHBA", "COL5A2", "ASPN", "CLDN7")
HPylori_metaanalysis$filterResults$FDR0.05_es0_nStudies4_looaFALSE_hetero0$negGeneNames <- c("PGC", "AKR1B10", "KCNE2", "CXCL17", "DPCR1", "CLDN18", "CTSE", "VSIG1", "MT1M")

Jiang_Sig <- HPylori_metaanalysis$filterResults[[1]]
Jiang_Filter_Summary <- summarizeFilterResults(metaObject = HPylori_metaanalysis, getMostRecentFilter(HPylori_metaanalysis))


## Create a summary ROC curve (Training data sets)
set.seed(333)
pooledROCPlot(metaObject = HPylori_metaanalysis, filterObject = Jiang_Sig)

##############################################################
##############################################################
## Validation

## Using ROC curve

# Validation dataset1
rocPlot(datasetObject = ValDataset1, filterObject = Jiang_Sig)

# Validation dataset2
rocPlot(datasetObject = ValDataset2, filterObject = Jiang_Sig)

# Validation dataset3
rocPlot(datasetObject = ValDataset3, filterObject = Jiang_Sig)

# Validation dataset4
rocPlot(datasetObject = ValDataset4, filterObject = Jiang_Sig)

## Cancer dataset1
rocPlot(datasetObject = CanDataset1, filterObject = Jiang_Sig)

## Cancer dataset2
rocPlot(datasetObject = CanDataset2, filterObject = Jiang_Sig)

## Cancer dataset3
rocPlot(datasetObject = CanDataset3, filterObject = Jiang_Sig)

## Cancer dataset4
rocPlot(datasetObject = CanDataset4, filterObject = Jiang_Sig)

## Cancer dataset5
rocPlot(datasetObject = CanDataset5, filterObject = Jiang_Sig)

## Cancer dataset6
rocPlot(datasetObject = CanDataset6, filterObject = Jiang_Sig)

## Cancer dataset7
rocPlot(datasetObject = CanDataset7, filterObject = Jiang_Sig)

## Cancer dataset8
rocPlot(datasetObject = CanDataset8, filterObject = Jiang_Sig)

## Cancer dataset9
rocPlot(datasetObject = CanDataset9, filterObject = Jiang_Sig)

## Cancer dataset11
rocPlot(datasetObject = CanDataset11, filterObject = Jiang_Sig)

## Cancer dataset12
rocPlot(datasetObject = CanDataset12, filterObject = Jiang_Sig)

## Cancer dataset15
rocPlot(datasetObject = CanDataset15, filterObject = Jiang_Sig)


#################################
#### Using PRC plot

# val dataset1
prcPlot(datasetObject = ValDataset1, filterObject = Jiang_Sig)

# val dataset2
prcPlot(datasetObject = ValDataset2, filterObject = Jiang_Sig)

# val dataset3
prcPlot(datasetObject = ValDataset3, filterObject = Jiang_Sig)

# val dataset4
prcPlot(datasetObject = ValDataset4, filterObject = Jiang_Sig)

# cancer dataset1
prcPlot(datasetObject = CanDataset1, filterObject = Jiang_Sig)

# cancer dataset2
prcPlot(datasetObject = CanDataset2, filterObject = Jiang_Sig)

# cancer dataset3
prcPlot(datasetObject = CanDataset3, filterObject = Jiang_Sig)

# cancer dataset4
prcPlot(datasetObject = CanDataset4, filterObject = Jiang_Sig)

# cancer dataset5
prcPlot(datasetObject = CanDataset5, filterObject = Jiang_Sig)

# cancer dataset6
prcPlot(datasetObject = CanDataset6, filterObject = Jiang_Sig)

# cancer dataset7
prcPlot(datasetObject = CanDataset7, filterObject = Jiang_Sig)

# cancer dataset8
prcPlot(datasetObject = CanDataset8, filterObject = Jiang_Sig)

# cancer dataset9
prcPlot(datasetObject = CanDataset9, filterObject = Jiang_Sig)

# cancer dataset11
prcPlot(datasetObject = CanDataset11, filterObject = Jiang_Sig)

# cancer dataset12
prcPlot(datasetObject = CanDataset12, filterObject = Jiang_Sig)

# cancer dataset15
prcPlot(datasetObject = CanDataset15, filterObject = Jiang_Sig)

##################################

#### Using violin plot

# Val Dataset1 
violinPlot(filterObject = Jiang_Sig, datasetObject = ValDataset1, labelColumn = "DiseaseStatus")

# Val Dataset2
violinPlot(filterObject = Jiang_Sig, datasetObject = ValDataset2, labelColumn = "DiseaseStatus")

# Val Dataset3
violinPlot(filterObject = Jiang_Sig, datasetObject = ValDataset3, labelColumn = "DiseaseStatus")

# Val Dataset4
violinPlot(filterObject = Jiang_Sig, datasetObject = ValDataset4, labelColumn = "DiseaseStatus")

# cancer dataset1
violinPlot(filterObject = Jiang_Sig, datasetObject = CanDataset1, labelColumn = "DiseaseStatus")

# cancer dataset2
violinPlot(filterObject = Jiang_Sig, datasetObject = CanDataset2, labelColumn = "DiseaseStatus")

# cancer dataset3
violinPlot(filterObject = Jiang_Sig, datasetObject = CanDataset3, labelColumn = "DiseaseStatus")

# cancer dataset4
violinPlot(filterObject = Jiang_Sig, datasetObject = CanDataset4, labelColumn = "DiseaseStatus")

# cancer dataset5
violinPlot(filterObject = Jiang_Sig, datasetObject = CanDataset5, labelColumn = "DiseaseStatus")

